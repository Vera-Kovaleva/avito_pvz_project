// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"avito_pvz/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

type MockConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnection) EXPECT() *MockConnection_Expecter {
	return &MockConnection_Expecter{mock: &_m.Mock}
}

// ExecContext provides a mock function for the type MockConnection
func (_mock *MockConnection) ExecContext(context1 context.Context, s string, vs ...any) (int64, error) {
	var tmpRet mock.Arguments
	if len(vs) > 0 {
		tmpRet = _mock.Called(context1, s, vs)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (int64, error)); ok {
		return returnFunc(context1, s, vs...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) int64); ok {
		r0 = returnFunc(context1, s, vs...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(context1, s, vs...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConnection_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type MockConnection_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - vs ...any
func (_e *MockConnection_Expecter) ExecContext(context1 interface{}, s interface{}, vs ...interface{}) *MockConnection_ExecContext_Call {
	return &MockConnection_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{context1, s}, vs...)...)}
}

func (_c *MockConnection_ExecContext_Call) Run(run func(context1 context.Context, s string, vs ...any)) *MockConnection_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConnection_ExecContext_Call) Return(n int64, err error) *MockConnection_ExecContext_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConnection_ExecContext_Call) RunAndReturn(run func(context1 context.Context, s string, vs ...any) (int64, error)) *MockConnection_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockConnection
func (_mock *MockConnection) GetContext(context1 context.Context, v any, s string, vs ...any) error {
	var tmpRet mock.Arguments
	if len(vs) > 0 {
		tmpRet = _mock.Called(context1, v, s, vs)
	} else {
		tmpRet = _mock.Called(context1, v, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, string, ...any) error); ok {
		r0 = returnFunc(context1, v, s, vs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockConnection_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
//   - context1 context.Context
//   - v any
//   - s string
//   - vs ...any
func (_e *MockConnection_Expecter) GetContext(context1 interface{}, v interface{}, s interface{}, vs ...interface{}) *MockConnection_GetContext_Call {
	return &MockConnection_GetContext_Call{Call: _e.mock.On("GetContext",
		append([]interface{}{context1, v, s}, vs...)...)}
}

func (_c *MockConnection_GetContext_Call) Run(run func(context1 context.Context, v any, s string, vs ...any)) *MockConnection_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []any
		var variadicArgs []any
		if len(args) > 3 {
			variadicArgs = args[3].([]any)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConnection_GetContext_Call) Return(err error) *MockConnection_GetContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_GetContext_Call) RunAndReturn(run func(context1 context.Context, v any, s string, vs ...any) error) *MockConnection_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// SelectContext provides a mock function for the type MockConnection
func (_mock *MockConnection) SelectContext(context1 context.Context, v any, s string, vs ...any) error {
	var tmpRet mock.Arguments
	if len(vs) > 0 {
		tmpRet = _mock.Called(context1, v, s, vs)
	} else {
		tmpRet = _mock.Called(context1, v, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SelectContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, string, ...any) error); ok {
		r0 = returnFunc(context1, v, s, vs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_SelectContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectContext'
type MockConnection_SelectContext_Call struct {
	*mock.Call
}

// SelectContext is a helper method to define mock.On call
//   - context1 context.Context
//   - v any
//   - s string
//   - vs ...any
func (_e *MockConnection_Expecter) SelectContext(context1 interface{}, v interface{}, s interface{}, vs ...interface{}) *MockConnection_SelectContext_Call {
	return &MockConnection_SelectContext_Call{Call: _e.mock.On("SelectContext",
		append([]interface{}{context1, v, s}, vs...)...)}
}

func (_c *MockConnection_SelectContext_Call) Run(run func(context1 context.Context, v any, s string, vs ...any)) *MockConnection_SelectContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []any
		var variadicArgs []any
		if len(args) > 3 {
			variadicArgs = args[3].([]any)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConnection_SelectContext_Call) Return(err error) *MockConnection_SelectContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_SelectContext_Call) RunAndReturn(run func(context1 context.Context, v any, s string, vs ...any) error) *MockConnection_SelectContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionProvider creates a new instance of MockConnectionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionProvider {
	mock := &MockConnectionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConnectionProvider is an autogenerated mock type for the ConnectionProvider type
type MockConnectionProvider struct {
	mock.Mock
}

type MockConnectionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionProvider) EXPECT() *MockConnectionProvider_Expecter {
	return &MockConnectionProvider_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockConnectionProvider
func (_mock *MockConnectionProvider) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnectionProvider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnectionProvider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnectionProvider_Expecter) Close() *MockConnectionProvider_Close_Call {
	return &MockConnectionProvider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnectionProvider_Close_Call) Run(run func()) *MockConnectionProvider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionProvider_Close_Call) Return(err error) *MockConnectionProvider_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnectionProvider_Close_Call) RunAndReturn(run func() error) *MockConnectionProvider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockConnectionProvider
func (_mock *MockConnectionProvider) Execute(context1 context.Context, fn func(context.Context, domain.Connection) error) error {
	ret := _mock.Called(context1, fn)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(context.Context, domain.Connection) error) error); ok {
		r0 = returnFunc(context1, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnectionProvider_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockConnectionProvider_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - context1 context.Context
//   - fn func(context.Context, domain.Connection) error
func (_e *MockConnectionProvider_Expecter) Execute(context1 interface{}, fn interface{}) *MockConnectionProvider_Execute_Call {
	return &MockConnectionProvider_Execute_Call{Call: _e.mock.On("Execute", context1, fn)}
}

func (_c *MockConnectionProvider_Execute_Call) Run(run func(context1 context.Context, fn func(context.Context, domain.Connection) error)) *MockConnectionProvider_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(context.Context, domain.Connection) error
		if args[1] != nil {
			arg1 = args[1].(func(context.Context, domain.Connection) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConnectionProvider_Execute_Call) Return(err error) *MockConnectionProvider_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnectionProvider_Execute_Call) RunAndReturn(run func(context1 context.Context, fn func(context.Context, domain.Connection) error) error) *MockConnectionProvider_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTx provides a mock function for the type MockConnectionProvider
func (_mock *MockConnectionProvider) ExecuteTx(context1 context.Context, fn func(context.Context, domain.Connection) error) error {
	ret := _mock.Called(context1, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(context.Context, domain.Connection) error) error); ok {
		r0 = returnFunc(context1, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnectionProvider_ExecuteTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTx'
type MockConnectionProvider_ExecuteTx_Call struct {
	*mock.Call
}

// ExecuteTx is a helper method to define mock.On call
//   - context1 context.Context
//   - fn func(context.Context, domain.Connection) error
func (_e *MockConnectionProvider_Expecter) ExecuteTx(context1 interface{}, fn interface{}) *MockConnectionProvider_ExecuteTx_Call {
	return &MockConnectionProvider_ExecuteTx_Call{Call: _e.mock.On("ExecuteTx", context1, fn)}
}

func (_c *MockConnectionProvider_ExecuteTx_Call) Run(run func(context1 context.Context, fn func(context.Context, domain.Connection) error)) *MockConnectionProvider_ExecuteTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(context.Context, domain.Connection) error
		if args[1] != nil {
			arg1 = args[1].(func(context.Context, domain.Connection) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConnectionProvider_ExecuteTx_Call) Return(err error) *MockConnectionProvider_ExecuteTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnectionProvider_ExecuteTx_Call) RunAndReturn(run func(context1 context.Context, fn func(context.Context, domain.Connection) error) error) *MockConnectionProvider_ExecuteTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Create(context1 context.Context, connection domain.Connection, user domain.User) error {
	ret := _mock.Called(context1, connection, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.User) error); ok {
		r0 = returnFunc(context1, connection, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - user domain.User
func (_e *MockUsersRepository_Expecter) Create(context1 interface{}, connection interface{}, user interface{}) *MockUsersRepository_Create_Call {
	return &MockUsersRepository_Create_Call{Call: _e.mock.On("Create", context1, connection, user)}
}

func (_c *MockUsersRepository_Create_Call) Run(run func(context1 context.Context, connection domain.Connection, user domain.User)) *MockUsersRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.User
		if args[2] != nil {
			arg2 = args[2].(domain.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Create_Call) Return(err error) *MockUsersRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersRepository_Create_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, user domain.User) error) *MockUsersRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ReadByEmail provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) ReadByEmail(context1 context.Context, connection domain.Connection, s string) (domain.User, error) {
	ret := _mock.Called(context1, connection, s)

	if len(ret) == 0 {
		panic("no return value specified for ReadByEmail")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, string) (domain.User, error)); ok {
		return returnFunc(context1, connection, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, string) domain.User); ok {
		r0 = returnFunc(context1, connection, s)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, string) error); ok {
		r1 = returnFunc(context1, connection, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_ReadByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadByEmail'
type MockUsersRepository_ReadByEmail_Call struct {
	*mock.Call
}

// ReadByEmail is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - s string
func (_e *MockUsersRepository_Expecter) ReadByEmail(context1 interface{}, connection interface{}, s interface{}) *MockUsersRepository_ReadByEmail_Call {
	return &MockUsersRepository_ReadByEmail_Call{Call: _e.mock.On("ReadByEmail", context1, connection, s)}
}

func (_c *MockUsersRepository_ReadByEmail_Call) Run(run func(context1 context.Context, connection domain.Connection, s string)) *MockUsersRepository_ReadByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersRepository_ReadByEmail_Call) Return(user domain.User, err error) *MockUsersRepository_ReadByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_ReadByEmail_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, s string) (domain.User, error)) *MockUsersRepository_ReadByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Update(context1 context.Context, connection domain.Connection, user domain.User) error {
	ret := _mock.Called(context1, connection, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.User) error); ok {
		r0 = returnFunc(context1, connection, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsersRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - user domain.User
func (_e *MockUsersRepository_Expecter) Update(context1 interface{}, connection interface{}, user interface{}) *MockUsersRepository_Update_Call {
	return &MockUsersRepository_Update_Call{Call: _e.mock.On("Update", context1, connection, user)}
}

func (_c *MockUsersRepository_Update_Call) Run(run func(context1 context.Context, connection domain.Connection, user domain.User)) *MockUsersRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.User
		if args[2] != nil {
			arg2 = args[2].(domain.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Update_Call) Return(err error) *MockUsersRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersRepository_Update_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, user domain.User) error) *MockUsersRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTokenByEmail provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) UpdateTokenByEmail(context1 context.Context, connection domain.Connection, s string, s1 string) error {
	ret := _mock.Called(context1, connection, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTokenByEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, string, string) error); ok {
		r0 = returnFunc(context1, connection, s, s1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersRepository_UpdateTokenByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTokenByEmail'
type MockUsersRepository_UpdateTokenByEmail_Call struct {
	*mock.Call
}

// UpdateTokenByEmail is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - s string
//   - s1 string
func (_e *MockUsersRepository_Expecter) UpdateTokenByEmail(context1 interface{}, connection interface{}, s interface{}, s1 interface{}) *MockUsersRepository_UpdateTokenByEmail_Call {
	return &MockUsersRepository_UpdateTokenByEmail_Call{Call: _e.mock.On("UpdateTokenByEmail", context1, connection, s, s1)}
}

func (_c *MockUsersRepository_UpdateTokenByEmail_Call) Run(run func(context1 context.Context, connection domain.Connection, s string, s1 string)) *MockUsersRepository_UpdateTokenByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUsersRepository_UpdateTokenByEmail_Call) Return(err error) *MockUsersRepository_UpdateTokenByEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersRepository_UpdateTokenByEmail_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, s string, s1 string) error) *MockUsersRepository_UpdateTokenByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPVZsRepository creates a new instance of MockPVZsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPVZsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPVZsRepository {
	mock := &MockPVZsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPVZsRepository is an autogenerated mock type for the PVZsRepository type
type MockPVZsRepository struct {
	mock.Mock
}

type MockPVZsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPVZsRepository) EXPECT() *MockPVZsRepository_Expecter {
	return &MockPVZsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPVZsRepository
func (_mock *MockPVZsRepository) Create(context1 context.Context, connection domain.Connection, pVZ domain.PVZ) error {
	ret := _mock.Called(context1, connection, pVZ)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.PVZ) error); ok {
		r0 = returnFunc(context1, connection, pVZ)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPVZsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPVZsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - pVZ domain.PVZ
func (_e *MockPVZsRepository_Expecter) Create(context1 interface{}, connection interface{}, pVZ interface{}) *MockPVZsRepository_Create_Call {
	return &MockPVZsRepository_Create_Call{Call: _e.mock.On("Create", context1, connection, pVZ)}
}

func (_c *MockPVZsRepository_Create_Call) Run(run func(context1 context.Context, connection domain.Connection, pVZ domain.PVZ)) *MockPVZsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.PVZ
		if args[2] != nil {
			arg2 = args[2].(domain.PVZ)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPVZsRepository_Create_Call) Return(err error) *MockPVZsRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPVZsRepository_Create_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, pVZ domain.PVZ) error) *MockPVZsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockPVZsRepository
func (_mock *MockPVZsRepository) FindAll(context1 context.Context, connection domain.Connection) ([]domain.PVZ, error) {
	ret := _mock.Called(context1, connection)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.PVZ
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection) ([]domain.PVZ, error)); ok {
		return returnFunc(context1, connection)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection) []domain.PVZ); ok {
		r0 = returnFunc(context1, connection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZ)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection) error); ok {
		r1 = returnFunc(context1, connection)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZsRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockPVZsRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
func (_e *MockPVZsRepository_Expecter) FindAll(context1 interface{}, connection interface{}) *MockPVZsRepository_FindAll_Call {
	return &MockPVZsRepository_FindAll_Call{Call: _e.mock.On("FindAll", context1, connection)}
}

func (_c *MockPVZsRepository_FindAll_Call) Run(run func(context1 context.Context, connection domain.Connection)) *MockPVZsRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPVZsRepository_FindAll_Call) Return(pVZs []domain.PVZ, err error) *MockPVZsRepository_FindAll_Call {
	_c.Call.Return(pVZs, err)
	return _c
}

func (_c *MockPVZsRepository_FindAll_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection) ([]domain.PVZ, error)) *MockPVZsRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDs provides a mock function for the type MockPVZsRepository
func (_mock *MockPVZsRepository) FindByIDs(context1 context.Context, connection domain.Connection, vs []domain.PVZID) ([]domain.PVZ, error) {
	ret := _mock.Called(context1, connection, vs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDs")
	}

	var r0 []domain.PVZ
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, []domain.PVZID) ([]domain.PVZ, error)); ok {
		return returnFunc(context1, connection, vs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, []domain.PVZID) []domain.PVZ); ok {
		r0 = returnFunc(context1, connection, vs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZ)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, []domain.PVZID) error); ok {
		r1 = returnFunc(context1, connection, vs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZsRepository_FindByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDs'
type MockPVZsRepository_FindByIDs_Call struct {
	*mock.Call
}

// FindByIDs is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - vs []domain.PVZID
func (_e *MockPVZsRepository_Expecter) FindByIDs(context1 interface{}, connection interface{}, vs interface{}) *MockPVZsRepository_FindByIDs_Call {
	return &MockPVZsRepository_FindByIDs_Call{Call: _e.mock.On("FindByIDs", context1, connection, vs)}
}

func (_c *MockPVZsRepository_FindByIDs_Call) Run(run func(context1 context.Context, connection domain.Connection, vs []domain.PVZID)) *MockPVZsRepository_FindByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 []domain.PVZID
		if args[2] != nil {
			arg2 = args[2].([]domain.PVZID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPVZsRepository_FindByIDs_Call) Return(pVZs []domain.PVZ, err error) *MockPVZsRepository_FindByIDs_Call {
	_c.Call.Return(pVZs, err)
	return _c
}

func (_c *MockPVZsRepository_FindByIDs_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, vs []domain.PVZID) ([]domain.PVZ, error)) *MockPVZsRepository_FindByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceptionsRepository creates a new instance of MockReceptionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceptionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceptionsRepository {
	mock := &MockReceptionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceptionsRepository is an autogenerated mock type for the ReceptionsRepository type
type MockReceptionsRepository struct {
	mock.Mock
}

type MockReceptionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceptionsRepository) EXPECT() *MockReceptionsRepository_Expecter {
	return &MockReceptionsRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockReceptionsRepository
func (_mock *MockReceptionsRepository) Close(context1 context.Context, connection domain.Connection, v domain.ReceptionID) error {
	ret := _mock.Called(context1, connection, v)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.ReceptionID) error); ok {
		r0 = returnFunc(context1, connection, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceptionsRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReceptionsRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - v domain.ReceptionID
func (_e *MockReceptionsRepository_Expecter) Close(context1 interface{}, connection interface{}, v interface{}) *MockReceptionsRepository_Close_Call {
	return &MockReceptionsRepository_Close_Call{Call: _e.mock.On("Close", context1, connection, v)}
}

func (_c *MockReceptionsRepository_Close_Call) Run(run func(context1 context.Context, connection domain.Connection, v domain.ReceptionID)) *MockReceptionsRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.ReceptionID
		if args[2] != nil {
			arg2 = args[2].(domain.ReceptionID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceptionsRepository_Close_Call) Return(err error) *MockReceptionsRepository_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceptionsRepository_Close_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, v domain.ReceptionID) error) *MockReceptionsRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockReceptionsRepository
func (_mock *MockReceptionsRepository) Create(context1 context.Context, connection domain.Connection, reception domain.Reception) error {
	ret := _mock.Called(context1, connection, reception)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.Reception) error); ok {
		r0 = returnFunc(context1, connection, reception)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceptionsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReceptionsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - reception domain.Reception
func (_e *MockReceptionsRepository_Expecter) Create(context1 interface{}, connection interface{}, reception interface{}) *MockReceptionsRepository_Create_Call {
	return &MockReceptionsRepository_Create_Call{Call: _e.mock.On("Create", context1, connection, reception)}
}

func (_c *MockReceptionsRepository_Create_Call) Run(run func(context1 context.Context, connection domain.Connection, reception domain.Reception)) *MockReceptionsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.Reception
		if args[2] != nil {
			arg2 = args[2].(domain.Reception)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceptionsRepository_Create_Call) Return(err error) *MockReceptionsRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceptionsRepository_Create_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, reception domain.Reception) error) *MockReceptionsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindActive provides a mock function for the type MockReceptionsRepository
func (_mock *MockReceptionsRepository) FindActive(context1 context.Context, connection domain.Connection, v domain.PVZID) (domain.Reception, error) {
	ret := _mock.Called(context1, connection, v)

	if len(ret) == 0 {
		panic("no return value specified for FindActive")
	}

	var r0 domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.PVZID) (domain.Reception, error)); ok {
		return returnFunc(context1, connection, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.PVZID) domain.Reception); ok {
		r0 = returnFunc(context1, connection, v)
	} else {
		r0 = ret.Get(0).(domain.Reception)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, domain.PVZID) error); ok {
		r1 = returnFunc(context1, connection, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionsRepository_FindActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindActive'
type MockReceptionsRepository_FindActive_Call struct {
	*mock.Call
}

// FindActive is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - v domain.PVZID
func (_e *MockReceptionsRepository_Expecter) FindActive(context1 interface{}, connection interface{}, v interface{}) *MockReceptionsRepository_FindActive_Call {
	return &MockReceptionsRepository_FindActive_Call{Call: _e.mock.On("FindActive", context1, connection, v)}
}

func (_c *MockReceptionsRepository_FindActive_Call) Run(run func(context1 context.Context, connection domain.Connection, v domain.PVZID)) *MockReceptionsRepository_FindActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.PVZID
		if args[2] != nil {
			arg2 = args[2].(domain.PVZID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceptionsRepository_FindActive_Call) Return(reception domain.Reception, err error) *MockReceptionsRepository_FindActive_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionsRepository_FindActive_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, v domain.PVZID) (domain.Reception, error)) *MockReceptionsRepository_FindActive_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDs provides a mock function for the type MockReceptionsRepository
func (_mock *MockReceptionsRepository) FindByIDs(context1 context.Context, connection domain.Connection, vs []domain.ReceptionID) ([]domain.Reception, error) {
	ret := _mock.Called(context1, connection, vs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDs")
	}

	var r0 []domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, []domain.ReceptionID) ([]domain.Reception, error)); ok {
		return returnFunc(context1, connection, vs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, []domain.ReceptionID) []domain.Reception); ok {
		r0 = returnFunc(context1, connection, vs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reception)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, []domain.ReceptionID) error); ok {
		r1 = returnFunc(context1, connection, vs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionsRepository_FindByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDs'
type MockReceptionsRepository_FindByIDs_Call struct {
	*mock.Call
}

// FindByIDs is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - vs []domain.ReceptionID
func (_e *MockReceptionsRepository_Expecter) FindByIDs(context1 interface{}, connection interface{}, vs interface{}) *MockReceptionsRepository_FindByIDs_Call {
	return &MockReceptionsRepository_FindByIDs_Call{Call: _e.mock.On("FindByIDs", context1, connection, vs)}
}

func (_c *MockReceptionsRepository_FindByIDs_Call) Run(run func(context1 context.Context, connection domain.Connection, vs []domain.ReceptionID)) *MockReceptionsRepository_FindByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 []domain.ReceptionID
		if args[2] != nil {
			arg2 = args[2].([]domain.ReceptionID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceptionsRepository_FindByIDs_Call) Return(receptions []domain.Reception, err error) *MockReceptionsRepository_FindByIDs_Call {
	_c.Call.Return(receptions, err)
	return _c
}

func (_c *MockReceptionsRepository_FindByIDs_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, vs []domain.ReceptionID) ([]domain.Reception, error)) *MockReceptionsRepository_FindByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductsRepository creates a new instance of MockProductsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductsRepository {
	mock := &MockProductsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductsRepository is an autogenerated mock type for the ProductsRepository type
type MockProductsRepository struct {
	mock.Mock
}

type MockProductsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductsRepository) EXPECT() *MockProductsRepository_Expecter {
	return &MockProductsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductsRepository
func (_mock *MockProductsRepository) Create(context1 context.Context, connection domain.Connection, product domain.Product) error {
	ret := _mock.Called(context1, connection, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.Product) error); ok {
		r0 = returnFunc(context1, connection, product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - product domain.Product
func (_e *MockProductsRepository_Expecter) Create(context1 interface{}, connection interface{}, product interface{}) *MockProductsRepository_Create_Call {
	return &MockProductsRepository_Create_Call{Call: _e.mock.On("Create", context1, connection, product)}
}

func (_c *MockProductsRepository_Create_Call) Run(run func(context1 context.Context, connection domain.Connection, product domain.Product)) *MockProductsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.Product
		if args[2] != nil {
			arg2 = args[2].(domain.Product)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProductsRepository_Create_Call) Return(err error) *MockProductsRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductsRepository_Create_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, product domain.Product) error) *MockProductsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLast provides a mock function for the type MockProductsRepository
func (_mock *MockProductsRepository) DeleteLast(context1 context.Context, connection domain.Connection, v domain.ReceptionID) error {
	ret := _mock.Called(context1, connection, v)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLast")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.ReceptionID) error); ok {
		r0 = returnFunc(context1, connection, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductsRepository_DeleteLast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLast'
type MockProductsRepository_DeleteLast_Call struct {
	*mock.Call
}

// DeleteLast is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - v domain.ReceptionID
func (_e *MockProductsRepository_Expecter) DeleteLast(context1 interface{}, connection interface{}, v interface{}) *MockProductsRepository_DeleteLast_Call {
	return &MockProductsRepository_DeleteLast_Call{Call: _e.mock.On("DeleteLast", context1, connection, v)}
}

func (_c *MockProductsRepository_DeleteLast_Call) Run(run func(context1 context.Context, connection domain.Connection, v domain.ReceptionID)) *MockProductsRepository_DeleteLast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.ReceptionID
		if args[2] != nil {
			arg2 = args[2].(domain.ReceptionID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProductsRepository_DeleteLast_Call) Return(err error) *MockProductsRepository_DeleteLast_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductsRepository_DeleteLast_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, v domain.ReceptionID) error) *MockProductsRepository_DeleteLast_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockProductsRepository
func (_mock *MockProductsRepository) Search(ctx context.Context, connection domain.Connection, from *time.Time, to *time.Time, page *int, limit *int) ([]domain.Product, error) {
	ret := _mock.Called(ctx, connection, from, to, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, *time.Time, *time.Time, *int, *int) ([]domain.Product, error)); ok {
		return returnFunc(ctx, connection, from, to, page, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, *time.Time, *time.Time, *int, *int) []domain.Product); ok {
		r0 = returnFunc(ctx, connection, from, to, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, *time.Time, *time.Time, *int, *int) error); ok {
		r1 = returnFunc(ctx, connection, from, to, page, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductsRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockProductsRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - connection domain.Connection
//   - from *time.Time
//   - to *time.Time
//   - page *int
//   - limit *int
func (_e *MockProductsRepository_Expecter) Search(ctx interface{}, connection interface{}, from interface{}, to interface{}, page interface{}, limit interface{}) *MockProductsRepository_Search_Call {
	return &MockProductsRepository_Search_Call{Call: _e.mock.On("Search", ctx, connection, from, to, page, limit)}
}

func (_c *MockProductsRepository_Search_Call) Run(run func(ctx context.Context, connection domain.Connection, from *time.Time, to *time.Time, page *int, limit *int)) *MockProductsRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 *time.Time
		if args[2] != nil {
			arg2 = args[2].(*time.Time)
		}
		var arg3 *time.Time
		if args[3] != nil {
			arg3 = args[3].(*time.Time)
		}
		var arg4 *int
		if args[4] != nil {
			arg4 = args[4].(*int)
		}
		var arg5 *int
		if args[5] != nil {
			arg5 = args[5].(*int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockProductsRepository_Search_Call) Return(products []domain.Product, err error) *MockProductsRepository_Search_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductsRepository_Search_Call) RunAndReturn(run func(ctx context.Context, connection domain.Connection, from *time.Time, to *time.Time, page *int, limit *int) ([]domain.Product, error)) *MockProductsRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// IncPVZs provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncPVZs() {
	_mock.Called()
	return
}

// MockMetrics_IncPVZs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncPVZs'
type MockMetrics_IncPVZs_Call struct {
	*mock.Call
}

// IncPVZs is a helper method to define mock.On call
func (_e *MockMetrics_Expecter) IncPVZs() *MockMetrics_IncPVZs_Call {
	return &MockMetrics_IncPVZs_Call{Call: _e.mock.On("IncPVZs")}
}

func (_c *MockMetrics_IncPVZs_Call) Run(run func()) *MockMetrics_IncPVZs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetrics_IncPVZs_Call) Return() *MockMetrics_IncPVZs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncPVZs_Call) RunAndReturn(run func()) *MockMetrics_IncPVZs_Call {
	_c.Run(run)
	return _c
}

// IncProducts provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncProducts() {
	_mock.Called()
	return
}

// MockMetrics_IncProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncProducts'
type MockMetrics_IncProducts_Call struct {
	*mock.Call
}

// IncProducts is a helper method to define mock.On call
func (_e *MockMetrics_Expecter) IncProducts() *MockMetrics_IncProducts_Call {
	return &MockMetrics_IncProducts_Call{Call: _e.mock.On("IncProducts")}
}

func (_c *MockMetrics_IncProducts_Call) Run(run func()) *MockMetrics_IncProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetrics_IncProducts_Call) Return() *MockMetrics_IncProducts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncProducts_Call) RunAndReturn(run func()) *MockMetrics_IncProducts_Call {
	_c.Run(run)
	return _c
}

// IncReceptions provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncReceptions() {
	_mock.Called()
	return
}

// MockMetrics_IncReceptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncReceptions'
type MockMetrics_IncReceptions_Call struct {
	*mock.Call
}

// IncReceptions is a helper method to define mock.On call
func (_e *MockMetrics_Expecter) IncReceptions() *MockMetrics_IncReceptions_Call {
	return &MockMetrics_IncReceptions_Call{Call: _e.mock.On("IncReceptions")}
}

func (_c *MockMetrics_IncReceptions_Call) Run(run func()) *MockMetrics_IncReceptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetrics_IncReceptions_Call) Return() *MockMetrics_IncReceptions_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncReceptions_Call) RunAndReturn(run func()) *MockMetrics_IncReceptions_Call {
	_c.Run(run)
	return _c
}

// IncUsers provides a mock function for the type MockMetrics
func (_mock *MockMetrics) IncUsers() {
	_mock.Called()
	return
}

// MockMetrics_IncUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncUsers'
type MockMetrics_IncUsers_Call struct {
	*mock.Call
}

// IncUsers is a helper method to define mock.On call
func (_e *MockMetrics_Expecter) IncUsers() *MockMetrics_IncUsers_Call {
	return &MockMetrics_IncUsers_Call{Call: _e.mock.On("IncUsers")}
}

func (_c *MockMetrics_IncUsers_Call) Run(run func()) *MockMetrics_IncUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetrics_IncUsers_Call) Return() *MockMetrics_IncUsers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_IncUsers_Call) RunAndReturn(run func()) *MockMetrics_IncUsers_Call {
	_c.Run(run)
	return _c
}

// NewMockAuthenticatedUser creates a new instance of MockAuthenticatedUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticatedUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticatedUser {
	mock := &MockAuthenticatedUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthenticatedUser is an autogenerated mock type for the AuthenticatedUser type
type MockAuthenticatedUser struct {
	mock.Mock
}

type MockAuthenticatedUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticatedUser) EXPECT() *MockAuthenticatedUser_Expecter {
	return &MockAuthenticatedUser_Expecter{mock: &_m.Mock}
}

// GetUserID provides a mock function for the type MockAuthenticatedUser
func (_mock *MockAuthenticatedUser) GetUserID() domain.UserID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 domain.UserID
	if returnFunc, ok := ret.Get(0).(func() domain.UserID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.UserID)
		}
	}
	return r0
}

// MockAuthenticatedUser_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type MockAuthenticatedUser_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
func (_e *MockAuthenticatedUser_Expecter) GetUserID() *MockAuthenticatedUser_GetUserID_Call {
	return &MockAuthenticatedUser_GetUserID_Call{Call: _e.mock.On("GetUserID")}
}

func (_c *MockAuthenticatedUser_GetUserID_Call) Run(run func()) *MockAuthenticatedUser_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthenticatedUser_GetUserID_Call) Return(v domain.UserID) *MockAuthenticatedUser_GetUserID_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockAuthenticatedUser_GetUserID_Call) RunAndReturn(run func() domain.UserID) *MockAuthenticatedUser_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRole provides a mock function for the type MockAuthenticatedUser
func (_mock *MockAuthenticatedUser) GetUserRole() domain.UserRole {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserRole")
	}

	var r0 domain.UserRole
	if returnFunc, ok := ret.Get(0).(func() domain.UserRole); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.UserRole)
	}
	return r0
}

// MockAuthenticatedUser_GetUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRole'
type MockAuthenticatedUser_GetUserRole_Call struct {
	*mock.Call
}

// GetUserRole is a helper method to define mock.On call
func (_e *MockAuthenticatedUser_Expecter) GetUserRole() *MockAuthenticatedUser_GetUserRole_Call {
	return &MockAuthenticatedUser_GetUserRole_Call{Call: _e.mock.On("GetUserRole")}
}

func (_c *MockAuthenticatedUser_GetUserRole_Call) Run(run func()) *MockAuthenticatedUser_GetUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthenticatedUser_GetUserRole_Call) Return(userRole domain.UserRole) *MockAuthenticatedUser_GetUserRole_Call {
	_c.Call.Return(userRole)
	return _c
}

func (_c *MockAuthenticatedUser_GetUserRole_Call) RunAndReturn(run func() domain.UserRole) *MockAuthenticatedUser_GetUserRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersInterface creates a new instance of MockUsersInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersInterface {
	mock := &MockUsersInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersInterface is an autogenerated mock type for the UsersInterface type
type MockUsersInterface struct {
	mock.Mock
}

type MockUsersInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersInterface) EXPECT() *MockUsersInterface_Expecter {
	return &MockUsersInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUsersInterface
func (_mock *MockUsersInterface) Create(context1 context.Context, s string, s1 string, userRole domain.UserRole) (domain.User, error) {
	ret := _mock.Called(context1, s, s1, userRole)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.UserRole) (domain.User, error)); ok {
		return returnFunc(context1, s, s1, userRole)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, domain.UserRole) domain.User); ok {
		r0 = returnFunc(context1, s, s1, userRole)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, domain.UserRole) error); ok {
		r1 = returnFunc(context1, s, s1, userRole)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
//   - userRole domain.UserRole
func (_e *MockUsersInterface_Expecter) Create(context1 interface{}, s interface{}, s1 interface{}, userRole interface{}) *MockUsersInterface_Create_Call {
	return &MockUsersInterface_Create_Call{Call: _e.mock.On("Create", context1, s, s1, userRole)}
}

func (_c *MockUsersInterface_Create_Call) Run(run func(context1 context.Context, s string, s1 string, userRole domain.UserRole)) *MockUsersInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 domain.UserRole
		if args[3] != nil {
			arg3 = args[3].(domain.UserRole)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUsersInterface_Create_Call) Return(user domain.User, err error) *MockUsersInterface_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersInterface_Create_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string, userRole domain.UserRole) (domain.User, error)) *MockUsersInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindTokenByEmailAndPassword provides a mock function for the type MockUsersInterface
func (_mock *MockUsersInterface) FindTokenByEmailAndPassword(context1 context.Context, s string, s1 string) (string, error) {
	ret := _mock.Called(context1, s, s1)

	if len(ret) == 0 {
		panic("no return value specified for FindTokenByEmailAndPassword")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(context1, s, s1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(context1, s, s1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(context1, s, s1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersInterface_FindTokenByEmailAndPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTokenByEmailAndPassword'
type MockUsersInterface_FindTokenByEmailAndPassword_Call struct {
	*mock.Call
}

// FindTokenByEmailAndPassword is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
func (_e *MockUsersInterface_Expecter) FindTokenByEmailAndPassword(context1 interface{}, s interface{}, s1 interface{}) *MockUsersInterface_FindTokenByEmailAndPassword_Call {
	return &MockUsersInterface_FindTokenByEmailAndPassword_Call{Call: _e.mock.On("FindTokenByEmailAndPassword", context1, s, s1)}
}

func (_c *MockUsersInterface_FindTokenByEmailAndPassword_Call) Run(run func(context1 context.Context, s string, s1 string)) *MockUsersInterface_FindTokenByEmailAndPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersInterface_FindTokenByEmailAndPassword_Call) Return(s2 string, err error) *MockUsersInterface_FindTokenByEmailAndPassword_Call {
	_c.Call.Return(s2, err)
	return _c
}

func (_c *MockUsersInterface_FindTokenByEmailAndPassword_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string) (string, error)) *MockUsersInterface_FindTokenByEmailAndPassword_Call {
	_c.Call.Return(run)
	return _c
}

// LoginByToken provides a mock function for the type MockUsersInterface
func (_mock *MockUsersInterface) LoginByToken(context1 context.Context, s string) (domain.AuthenticatedUser, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for LoginByToken")
	}

	var r0 domain.AuthenticatedUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.AuthenticatedUser, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.AuthenticatedUser); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.AuthenticatedUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersInterface_LoginByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginByToken'
type MockUsersInterface_LoginByToken_Call struct {
	*mock.Call
}

// LoginByToken is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockUsersInterface_Expecter) LoginByToken(context1 interface{}, s interface{}) *MockUsersInterface_LoginByToken_Call {
	return &MockUsersInterface_LoginByToken_Call{Call: _e.mock.On("LoginByToken", context1, s)}
}

func (_c *MockUsersInterface_LoginByToken_Call) Run(run func(context1 context.Context, s string)) *MockUsersInterface_LoginByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersInterface_LoginByToken_Call) Return(authenticatedUser domain.AuthenticatedUser, err error) *MockUsersInterface_LoginByToken_Call {
	_c.Call.Return(authenticatedUser, err)
	return _c
}

func (_c *MockUsersInterface_LoginByToken_Call) RunAndReturn(run func(context1 context.Context, s string) (domain.AuthenticatedUser, error)) *MockUsersInterface_LoginByToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPVZsInterface creates a new instance of MockPVZsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPVZsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPVZsInterface {
	mock := &MockPVZsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPVZsInterface is an autogenerated mock type for the PVZsInterface type
type MockPVZsInterface struct {
	mock.Mock
}

type MockPVZsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPVZsInterface) EXPECT() *MockPVZsInterface_Expecter {
	return &MockPVZsInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPVZsInterface
func (_mock *MockPVZsInterface) Create(context1 context.Context, authenticatedUser domain.AuthenticatedUser, pVZCity domain.PVZCity) (domain.PVZ, error) {
	ret := _mock.Called(context1, authenticatedUser, pVZCity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.PVZ
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZCity) (domain.PVZ, error)); ok {
		return returnFunc(context1, authenticatedUser, pVZCity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZCity) domain.PVZ); ok {
		r0 = returnFunc(context1, authenticatedUser, pVZCity)
	} else {
		r0 = ret.Get(0).(domain.PVZ)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthenticatedUser, domain.PVZCity) error); ok {
		r1 = returnFunc(context1, authenticatedUser, pVZCity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPVZsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - authenticatedUser domain.AuthenticatedUser
//   - pVZCity domain.PVZCity
func (_e *MockPVZsInterface_Expecter) Create(context1 interface{}, authenticatedUser interface{}, pVZCity interface{}) *MockPVZsInterface_Create_Call {
	return &MockPVZsInterface_Create_Call{Call: _e.mock.On("Create", context1, authenticatedUser, pVZCity)}
}

func (_c *MockPVZsInterface_Create_Call) Run(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, pVZCity domain.PVZCity)) *MockPVZsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthenticatedUser
		if args[1] != nil {
			arg1 = args[1].(domain.AuthenticatedUser)
		}
		var arg2 domain.PVZCity
		if args[2] != nil {
			arg2 = args[2].(domain.PVZCity)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPVZsInterface_Create_Call) Return(pVZ domain.PVZ, err error) *MockPVZsInterface_Create_Call {
	_c.Call.Return(pVZ, err)
	return _c
}

func (_c *MockPVZsInterface_Create_Call) RunAndReturn(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, pVZCity domain.PVZCity) (domain.PVZ, error)) *MockPVZsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockPVZsInterface
func (_mock *MockPVZsInterface) FindAll(context1 context.Context) ([]domain.PVZ, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.PVZ
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.PVZ, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.PVZ); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZ)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZsInterface_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockPVZsInterface_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockPVZsInterface_Expecter) FindAll(context1 interface{}) *MockPVZsInterface_FindAll_Call {
	return &MockPVZsInterface_FindAll_Call{Call: _e.mock.On("FindAll", context1)}
}

func (_c *MockPVZsInterface_FindAll_Call) Run(run func(context1 context.Context)) *MockPVZsInterface_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPVZsInterface_FindAll_Call) Return(pVZs []domain.PVZ, err error) *MockPVZsInterface_FindAll_Call {
	_c.Call.Return(pVZs, err)
	return _c
}

func (_c *MockPVZsInterface_FindAll_Call) RunAndReturn(run func(context1 context.Context) ([]domain.PVZ, error)) *MockPVZsInterface_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindPVZReceptionProducts provides a mock function for the type MockPVZsInterface
func (_mock *MockPVZsInterface) FindPVZReceptionProducts(context1 context.Context, authenticatedUser domain.AuthenticatedUser, time1 *time.Time, time11 *time.Time, n *int, n1 *int) ([]domain.PVZReceptionsProducts, error) {
	ret := _mock.Called(context1, authenticatedUser, time1, time11, n, n1)

	if len(ret) == 0 {
		panic("no return value specified for FindPVZReceptionProducts")
	}

	var r0 []domain.PVZReceptionsProducts
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, *time.Time, *time.Time, *int, *int) ([]domain.PVZReceptionsProducts, error)); ok {
		return returnFunc(context1, authenticatedUser, time1, time11, n, n1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, *time.Time, *time.Time, *int, *int) []domain.PVZReceptionsProducts); ok {
		r0 = returnFunc(context1, authenticatedUser, time1, time11, n, n1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PVZReceptionsProducts)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthenticatedUser, *time.Time, *time.Time, *int, *int) error); ok {
		r1 = returnFunc(context1, authenticatedUser, time1, time11, n, n1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPVZsInterface_FindPVZReceptionProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPVZReceptionProducts'
type MockPVZsInterface_FindPVZReceptionProducts_Call struct {
	*mock.Call
}

// FindPVZReceptionProducts is a helper method to define mock.On call
//   - context1 context.Context
//   - authenticatedUser domain.AuthenticatedUser
//   - time1 *time.Time
//   - time11 *time.Time
//   - n *int
//   - n1 *int
func (_e *MockPVZsInterface_Expecter) FindPVZReceptionProducts(context1 interface{}, authenticatedUser interface{}, time1 interface{}, time11 interface{}, n interface{}, n1 interface{}) *MockPVZsInterface_FindPVZReceptionProducts_Call {
	return &MockPVZsInterface_FindPVZReceptionProducts_Call{Call: _e.mock.On("FindPVZReceptionProducts", context1, authenticatedUser, time1, time11, n, n1)}
}

func (_c *MockPVZsInterface_FindPVZReceptionProducts_Call) Run(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, time1 *time.Time, time11 *time.Time, n *int, n1 *int)) *MockPVZsInterface_FindPVZReceptionProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthenticatedUser
		if args[1] != nil {
			arg1 = args[1].(domain.AuthenticatedUser)
		}
		var arg2 *time.Time
		if args[2] != nil {
			arg2 = args[2].(*time.Time)
		}
		var arg3 *time.Time
		if args[3] != nil {
			arg3 = args[3].(*time.Time)
		}
		var arg4 *int
		if args[4] != nil {
			arg4 = args[4].(*int)
		}
		var arg5 *int
		if args[5] != nil {
			arg5 = args[5].(*int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockPVZsInterface_FindPVZReceptionProducts_Call) Return(pVZReceptionsProductss []domain.PVZReceptionsProducts, err error) *MockPVZsInterface_FindPVZReceptionProducts_Call {
	_c.Call.Return(pVZReceptionsProductss, err)
	return _c
}

func (_c *MockPVZsInterface_FindPVZReceptionProducts_Call) RunAndReturn(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, time1 *time.Time, time11 *time.Time, n *int, n1 *int) ([]domain.PVZReceptionsProducts, error)) *MockPVZsInterface_FindPVZReceptionProducts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReceptionsInterface creates a new instance of MockReceptionsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReceptionsInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReceptionsInterface {
	mock := &MockReceptionsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReceptionsInterface is an autogenerated mock type for the ReceptionsInterface type
type MockReceptionsInterface struct {
	mock.Mock
}

type MockReceptionsInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReceptionsInterface) EXPECT() *MockReceptionsInterface_Expecter {
	return &MockReceptionsInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockReceptionsInterface
func (_mock *MockReceptionsInterface) Close(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID) (domain.Reception, error) {
	ret := _mock.Called(context1, authenticatedUser, v)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZID) (domain.Reception, error)); ok {
		return returnFunc(context1, authenticatedUser, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZID) domain.Reception); ok {
		r0 = returnFunc(context1, authenticatedUser, v)
	} else {
		r0 = ret.Get(0).(domain.Reception)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthenticatedUser, domain.PVZID) error); ok {
		r1 = returnFunc(context1, authenticatedUser, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionsInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReceptionsInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - context1 context.Context
//   - authenticatedUser domain.AuthenticatedUser
//   - v domain.PVZID
func (_e *MockReceptionsInterface_Expecter) Close(context1 interface{}, authenticatedUser interface{}, v interface{}) *MockReceptionsInterface_Close_Call {
	return &MockReceptionsInterface_Close_Call{Call: _e.mock.On("Close", context1, authenticatedUser, v)}
}

func (_c *MockReceptionsInterface_Close_Call) Run(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID)) *MockReceptionsInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthenticatedUser
		if args[1] != nil {
			arg1 = args[1].(domain.AuthenticatedUser)
		}
		var arg2 domain.PVZID
		if args[2] != nil {
			arg2 = args[2].(domain.PVZID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceptionsInterface_Close_Call) Return(reception domain.Reception, err error) *MockReceptionsInterface_Close_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionsInterface_Close_Call) RunAndReturn(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID) (domain.Reception, error)) *MockReceptionsInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockReceptionsInterface
func (_mock *MockReceptionsInterface) Create(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID) (domain.Reception, error) {
	ret := _mock.Called(context1, authenticatedUser, v)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Reception
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZID) (domain.Reception, error)); ok {
		return returnFunc(context1, authenticatedUser, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZID) domain.Reception); ok {
		r0 = returnFunc(context1, authenticatedUser, v)
	} else {
		r0 = ret.Get(0).(domain.Reception)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthenticatedUser, domain.PVZID) error); ok {
		r1 = returnFunc(context1, authenticatedUser, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionsInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReceptionsInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - authenticatedUser domain.AuthenticatedUser
//   - v domain.PVZID
func (_e *MockReceptionsInterface_Expecter) Create(context1 interface{}, authenticatedUser interface{}, v interface{}) *MockReceptionsInterface_Create_Call {
	return &MockReceptionsInterface_Create_Call{Call: _e.mock.On("Create", context1, authenticatedUser, v)}
}

func (_c *MockReceptionsInterface_Create_Call) Run(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID)) *MockReceptionsInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthenticatedUser
		if args[1] != nil {
			arg1 = args[1].(domain.AuthenticatedUser)
		}
		var arg2 domain.PVZID
		if args[2] != nil {
			arg2 = args[2].(domain.PVZID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceptionsInterface_Create_Call) Return(reception domain.Reception, err error) *MockReceptionsInterface_Create_Call {
	_c.Call.Return(reception, err)
	return _c
}

func (_c *MockReceptionsInterface_Create_Call) RunAndReturn(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID) (domain.Reception, error)) *MockReceptionsInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockReceptionsInterface
func (_mock *MockReceptionsInterface) CreateProduct(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID, productType domain.ProductType) (domain.Product, error) {
	ret := _mock.Called(context1, authenticatedUser, v, productType)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZID, domain.ProductType) (domain.Product, error)); ok {
		return returnFunc(context1, authenticatedUser, v, productType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZID, domain.ProductType) domain.Product); ok {
		r0 = returnFunc(context1, authenticatedUser, v, productType)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AuthenticatedUser, domain.PVZID, domain.ProductType) error); ok {
		r1 = returnFunc(context1, authenticatedUser, v, productType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReceptionsInterface_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockReceptionsInterface_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - context1 context.Context
//   - authenticatedUser domain.AuthenticatedUser
//   - v domain.PVZID
//   - productType domain.ProductType
func (_e *MockReceptionsInterface_Expecter) CreateProduct(context1 interface{}, authenticatedUser interface{}, v interface{}, productType interface{}) *MockReceptionsInterface_CreateProduct_Call {
	return &MockReceptionsInterface_CreateProduct_Call{Call: _e.mock.On("CreateProduct", context1, authenticatedUser, v, productType)}
}

func (_c *MockReceptionsInterface_CreateProduct_Call) Run(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID, productType domain.ProductType)) *MockReceptionsInterface_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthenticatedUser
		if args[1] != nil {
			arg1 = args[1].(domain.AuthenticatedUser)
		}
		var arg2 domain.PVZID
		if args[2] != nil {
			arg2 = args[2].(domain.PVZID)
		}
		var arg3 domain.ProductType
		if args[3] != nil {
			arg3 = args[3].(domain.ProductType)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockReceptionsInterface_CreateProduct_Call) Return(product domain.Product, err error) *MockReceptionsInterface_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockReceptionsInterface_CreateProduct_Call) RunAndReturn(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID, productType domain.ProductType) (domain.Product, error)) *MockReceptionsInterface_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLastProduct provides a mock function for the type MockReceptionsInterface
func (_mock *MockReceptionsInterface) DeleteLastProduct(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID) error {
	ret := _mock.Called(context1, authenticatedUser, v)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AuthenticatedUser, domain.PVZID) error); ok {
		r0 = returnFunc(context1, authenticatedUser, v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReceptionsInterface_DeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLastProduct'
type MockReceptionsInterface_DeleteLastProduct_Call struct {
	*mock.Call
}

// DeleteLastProduct is a helper method to define mock.On call
//   - context1 context.Context
//   - authenticatedUser domain.AuthenticatedUser
//   - v domain.PVZID
func (_e *MockReceptionsInterface_Expecter) DeleteLastProduct(context1 interface{}, authenticatedUser interface{}, v interface{}) *MockReceptionsInterface_DeleteLastProduct_Call {
	return &MockReceptionsInterface_DeleteLastProduct_Call{Call: _e.mock.On("DeleteLastProduct", context1, authenticatedUser, v)}
}

func (_c *MockReceptionsInterface_DeleteLastProduct_Call) Run(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID)) *MockReceptionsInterface_DeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AuthenticatedUser
		if args[1] != nil {
			arg1 = args[1].(domain.AuthenticatedUser)
		}
		var arg2 domain.PVZID
		if args[2] != nil {
			arg2 = args[2].(domain.PVZID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReceptionsInterface_DeleteLastProduct_Call) Return(err error) *MockReceptionsInterface_DeleteLastProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReceptionsInterface_DeleteLastProduct_Call) RunAndReturn(run func(context1 context.Context, authenticatedUser domain.AuthenticatedUser, v domain.PVZID) error) *MockReceptionsInterface_DeleteLastProduct_Call {
	_c.Call.Return(run)
	return _c
}
